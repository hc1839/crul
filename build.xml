<project xmlns:ivy="antlib:org.apache.ivy.ant" name="crul" default="build">
    <!-- Ivy properties. -->

    <property name="ivy.install.version" value="2.5.0-rc1"/>
    <condition property="ivy.home" value="${env.IVY_HOME}">
        <isset property="env.IVY_HOME"/>
    </condition>
    <property name="ivy.home" value="${user.home}/.ant"/>
    <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>


    <!-- Ivy targets. -->

    <target name="download-ivy" unless="offline">
        <mkdir dir="${ivy.jar.dir}"/>
        <get
            src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
            dest="${ivy.jar.file}"
            usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>

        <taskdef
            resource="org/apache/ivy/ant/antlib.xml"
            uri="antlib:org.apache.ivy.ant"
            classpathref="ivy.lib.path"/>
    </target>


    <property environment="env"/>


    <!-- Properties related to dependency management. -->

    <!-- Path to the directory of the JAR dependencies managed by Ivy. -->
    <property name="config.lib.dir" value="lib"/>


    <!-- Properties related to building. -->

    <!-- Path to root directory of Kotlin's compiler distribution. -->
    <property name="config.kotlin.home" value="${env.KOTLIN_HOME}"/>

    <!-- Path to the source directory. -->
    <property name="src.dir" value="src"/>

    <!-- Path to the target directory. -->
    <property name="config.target.dir" value="target"/>

    <!-- Path to the compile directory. -->
    <property name="compile.dir" value="${config.target.dir}/compile"/>

    <!-- Path to the build directory. -->
    <property name="build.dir" value="${config.target.dir}/build"/>


    <!-- Properties related to project information. -->

    <!-- Name of the project. -->
    <property name="project.name" value="crul"/>

    <!-- Version of the project. -->
    <property name="project.version" value="master"/>

    <!-- Name of the project JAR file. -->
    <property name="proj.jar.name" value="${project.name}-${project.version}.jar"/>


    <!-- Properties related to documentation. -->

    <!-- Path to Dokka's fat JAR. -->
    <property name="config.dokka.fatjar" value=""/>

    <!-- Dokka's output format. -->
    <property name="config.dokka.output.format" value="html"/>

    <!-- Path to the output directory for the generated documentation. -->
    <property name="doc.dir" value="${config.target.dir}/doc"/>


    <typedef
        resource="org/jetbrains/kotlin/ant/antlib.xml"
        classpath="${config.kotlin.home}/lib/kotlin-ant.jar"
        onerror="report"/>

    <typedef
        resource="dokka-antlib.xml"
        classpath="${config.dokka.fatjar}"
        onerror="report"/>

    <target
        name="resolve.deps"
        description="Retrieves dependencies with Ivy.">

        <ivy:retrieve pattern="${config.lib.dir}/[artifact]-[revision](-[classifier]).[ext]"/>
    </target>

    <!-- Paths to all dependencies, including the build directory. -->
    <path id="classpath.all">
        <fileset dir="${config.lib.dir}">
            <include name="**/*.jar"/>
            <exclude name="**/${proj.jar.name}"/>
        </fileset>
        <pathelement location="${config.target.dir}/compile"/>
    </path>

    <target
        name="list.config.options"
        description="Lists the configurable options.">

        <echoproperties prefix="config." format="text"/>
    </target>

    <target
        name="create.compile.dir"
        depends="init-ivy,resolve.deps">

        <mkdir dir="${compile.dir}"/>
    </target>

    <!-- Copies the information stores. -->
    <target
        name="copy.info.stores"
        depends="create.compile.dir">

        <copy todir="${compile.dir}" preservelastmodified="true">
            <fileset dir="${src.dir}" includes="**/*.xml"/>
            <fileset dir="${src.dir}" includes="**/*.json"/>
            <fileset dir="${src.dir}" includes="**/*.avsc"/>
        </copy>
    </target>

    <!-- Serves as an intermediate target only. Project must be packaged as a
         JAR file. -->
    <target
        name="compile"
        depends="copy.info.stores">

        <kotlinc
            classpathref="classpath.all"
            src="${src.dir}"
            output="${compile.dir}">

            <compilerarg value="-Werror"/>
            <compilerarg value="-jvm-target"/>
            <compilerarg value="1.8"/>
        </kotlinc>
    </target>

    <target
        name="build"
        depends="compile"
        description="Builds the project by compiling and packaging it as a JAR.">

        <delete quiet="true">
            <fileset dir="${build.dir}" includes="${proj.jar.name}"/>
        </delete>

        <mkdir dir="${build.dir}"/>

        <jar
            basedir="${compile.dir}"
            destfile="${build.dir}/${proj.jar.name}"/>
    </target>

    <target
        name="doc"
        description="Generates the library documentation.">

        <mkdir dir="${doc.dir}"/>

        <dokka
            classpathref="classpath.all"
            src="${src.dir}"
            outputDir="${doc.dir}"
            moduleName="${project.name}"
            outputFormat="${config.dokka.output.format}"/>
    </target>

    <target
        name="clean.build"
        description="Removes the build directory.">

        <delete quiet="true" includeEmptyDirs="true">
            <fileset dir="${build.dir}"/>
        </delete>
    </target>

    <target
        name="clean.doc"
        description="Removes the doc directory.">

        <delete quiet="true" includeEmptyDirs="true">
            <fileset dir="${doc.dir}"/>
        </delete>
    </target>

    <target
        name="clean"
        description="Removes the target directory.">

        <delete quiet="true" includeEmptyDirs="true">
            <fileset dir="${config.target.dir}"/>
        </delete>
    </target>
</project>
